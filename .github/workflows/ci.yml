# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven



#=== CURRENTLY TESTING ===


name: Maven Java CI 

on:
  push:
    branches:
      - upcoming-v4
  pull_request:
    types: [opened, synchronize, reopened]

#env:
#  AWS_REGION: ${{ secrets.AWS_REGION }}
#  SITE_S3_URI: ${{ secrets.SITE_S3_URI }}

# We run a few jobs to get them done in parallel.

jobs:
  build:
#    permissions:
      # The following permissions are needed for OpenID Connect (OIDC) to 
      # allows GitHub Actions access resources on cloud provider, 
      # without having to store creds as GH secrets.
      
      # This is required for requesting the JWT
#      id-token: write 
      # This is required for actions/checkout
#      contents: read

    runs-on: ubuntu-latest

    steps:

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
      
      - name: Source checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - id: pr
        name: Get Current Pull Request
        if: github.event_name == 'pull_request'
        uses: 8BitJonny/gh-get-current-pr@1.0.1
        with:
          github-token: $
          filterOutClosed: true
  
      - id: file_changes
        name: File Changes
        uses: trilom/file-changes-action@v1.2.3
        with:
          prNumber: $
          pushBefore: ''
          pushAfter: ''
  
      - name: Ouput File Changes
        run: echo '$'        
         
#        if: github.event_name == 'push'
  
        
      # Runs a single command using the runners shell
#      - name: Run one "build"
#        run: echo Hello, one!
#        if: contains(steps.file_changes.outputs.files , '"one/')
        

      #--- PUSH ---     
#      - name: Maven build and unit tests
#        run: mvn -B package
      #--- PULL REQUESTS ---          
           

        