name: find modified files

on:
  push:
    branches: [ dk-actions-v4 ]
  pull_request:
    branches: [ dk-actions-v4 ]


jobs:
  update-author:
    name: run_when_pr_is_merged
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
  

    env:
      author_name: 'new-author'

    steps:
      - uses: actions/checkout@v4
        with:
          ref: dk-actions-v4
          fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}
      
      - name: Get changed files
        id: changed-files
        run: |
            # get a list of all the modified java file and save it in the output 
            if ${{ github.event_name == 'pull_request' }}; then
                echo "MODIFIED_FILES=$(git diff --name-only -r HEAD^1 HEAD | xargs)" >> $GITHUB_OUTPUT
                echo "MODIFIED_JAVA_FILES=$(git diff --name-only -r HEAD^1 HEAD -- '*.java' | xarges)" >> $GITHUB_OUTPUT 
            else
                echo "MODIFIED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | xargs)" >> $GITHUB_OUTPUT
                echo "MODIFIED_JAVA_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} -- '*.java' | xargs)" >> $GITHUB_OUTPUT
                fi

      - name: List all changed files contain Copyright Info
        run: |
          current_year=$(date +'%Y')
          echo "All the following changed contains Copyright Info:"
          for file in ${{ steps.changed-files.outputs.MODIFIED_FILES }}; do
            # exclude all yml and yaml files
            if [[ "${file}" != *.yml && "${file}" != *.yaml ]]; then
              # check if file contain single year copyright info
              if grep -qE 'Copyright [0-9]{4} Norconex Inc\.' "$file"; then
                echo "$file: Single year Copyright"

                #Check if the existing year found is the current year          
                year_in_file=$(grep -oP 'Copyright \K[0-9]{4}' "$file")
                              
                if [ "$year_in_file" != "$current_year" ]; then
                  # Append current year to the existing copyright info in each file
                  sed -i "s/Copyright $year_in_file Norconex Inc./Copyright $year_in_file-$current_year Norconex Inc./g" "$file"
                  echo "File that has been modified: ${file}"
                  echo " "            
                  head -n 10 "${file}"
                  echo "End of File "
                  echo ""
                else
                  echo ""
                  echo "Skipping replacement in ${file} because the year is already the current year."
                  echo " "            
                  head -n 10 "${file}"
                  echo "End of File "
                  echo ""
                fi
              # check if file contain range year copyright info  
              elif grep -qE 'Copyright [0-9]{4}-[0-9]{4} Norconex Inc\.' "$file"; then
                echo "$file: Range year Copyright"

                # Extract the second year from the copyright info
                second_year=$(grep -oE 'Copyright [0-9]{4}-[0-9]{4} Norconex Inc\.' "${file}" | sed -n 's/.*-\([0-9]\{4\}\) Norconex Inc\./\1/p')
    
                # Check if the second year is not equal to the current year, if so replace the 2nd year with the current year
                if [ "${second_year}" != "$(date +'%Y')" ]; then
                  sed -i "s/Copyright \([0-9]\{4\}\)-\([0-9]\{4\}\) Norconex Inc\./Copyright \1-$(date +'%Y') Norconex Inc./" "${file}"
    
                  # Display the top 10 lines of the modified file
                  echo ""
                  echo "File that has been modified: ${file}"
                  echo ""
                  echo "Top 10 lines of ${file} after replacement:"
                  head -n 10 "${file}"
                  echo "End of File"
                else
                  echo ""
                  echo "Skipping replacement in ${file} because the second year is already the current year."
                fi
              else
                echo ""
                echo "$file doesn't contains Copyright Info"  
                echo ""
              fi
            fi  
          done
          
      - name: List all changed files
        run: |
            echo "Here is all the modified JAVA files:"
            for file in ${{ steps.changed-files.outputs.MODIFIED_FILES }}; do
              echo "$file was changed"            
            done    

      - name: List all changed JAVA files
        run: |
          echo "Here is all the modified JAVA files:"
          for file in ${{ steps.changed-files.outputs.MODIFIED_JAVA_FILES }}; do
            echo "$file was changed"            
          done

      # - name: Check for String in Modified Files
      #   run: |
      #     STRING_TO_CHECK="@author ${{ env.author_name}}"
      #     SEARCH_STRING="@author"
      #     NEW_LINES="@author New Author\n * "

      #     for file in ${{ steps.changed-files.outputs.MODIFIED_JAVA_FILES }}; do
      #       # check if the Author's name is present in the @author tag
      #       if grep -q "$STRING_TO_CHECK" "$file"; then
      #         echo "The string '$STRING_TO_CHECK' exists in the file: $file"
      #         echo "No change to file"
      #         #sed -i "/$SEARCH_STRING/ { s/$SEARCH_STRING/$NEW_LINES&/; :a; n; ba; }" "$file"
      #         #sed -i "/$STRING_TO_CHECK/ { s/$STRING_TO_CHECK/$NEW_LINES&/; :a; n; ba; }" "$file"
      #         #sed -i "/$STRING_TO_CHECK/!b;a $NEW_LINES" "$file"              
      #       else
      #         echo "The string '$STRING_TO_CHECK' doesn't exist in the file: $file"
      #         sed -i "/$SEARCH_STRING/ { s/$SEARCH_STRING/$NEW_LINES&/; :a; n; ba; }" "$file"
      #         echo "Added '$NEW_LINES' in $file"
      #       fi
      #       more $file                        
      #     done


      